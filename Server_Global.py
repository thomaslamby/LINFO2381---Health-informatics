#!/usr/bin/env python3

import datetime
import json


##
## Initialization of the CouchDB server (creation of 1 collection of
## documents named "ehr", if it is not already existing)
##

import CouchDBClient

client = CouchDBClient.CouchDBClient(url='http://localhost:5984', username='admin', password='password')

client.reset()   # If you want to clear the entire content of CouchDB

if not 'ehr' in client.listDatabases():
    client.createDatabase('ehr')


##
## Optional: You can install CouchDB views at this point (this is not
## mandatory, but using views will vastly improve performance)
##

# TODO
# BEGIN STRIP
client.installView('ehr', 'temperatures', 'by_patient_id', '''
function(doc) {
if (doc.type == 'temperature') {
    emit(doc.patient_id, doc);
  }
}
''')

client.installView('ehr', 'blood_pressures', 'by_patient_id', '''
function(doc) {
if (doc.type == 'blood_pressures') {
    emit(doc.patient_id, doc);
  }
}
''')

client.installView('ehr', 'blood_sugars', 'by_patient_id', '''
function(doc) {
if (doc.type == 'blood_sugar') {
    emit(doc.patient_id, doc);
  }
}
''')

client.installView('ehr', 'food_journals', 'by_patient_id', '''
function(doc) {
if (doc.type == 'food_journal') {
    emit(doc.patient_id, doc);
  }
}
''')

client.installView('ehr', 'medications', 'by_patient_id', '''
function(doc) {
if (doc.type == 'medication') {
    emit(doc.patient_id, doc);
  }
}
''')

client.installView('ehr', 'physical_activities', 'by_patient_id', '''
function(doc) {
if (doc.type == 'physical_activity') {
    emit(doc.patient_id, doc);
  }
}
''')

client.installView('ehr', 'appointments', 'by_patient_id', '''
function(doc) {
if (doc.type == 'appointment') {
    emit(doc.patient_id, doc);
  }
}
''')

client.installView('ehr', 'patients', 'by_patient_name', '''
function(doc) {
  if (doc.type == 'patient') {
    emit(doc.name, doc);
  }
}
''')
# END STRIP



##
## Serving static HTML/JavaScript resources using Flask
##

from flask import Flask, Response, request, redirect, url_for
app = Flask(__name__)

@app.route('/')
def hello():
    return redirect(url_for('get_index'))

@app.route('/index.html', methods = [ 'GET' ])
def get_index():
    with open('index.html', 'r') as f:
        return Response(f.read(), mimetype = 'text/html')

@app.route('/app.js', methods = [ 'GET' ])
def get_javascript():
    with open('app.js', 'r') as f:
        return Response(f.read(), mimetype = 'text/javascript')


##
## REST API to be implemented by the students
##
    
@app.route('/create-patient', methods = [ 'POST' ])
def create_patient():
    # "request.get_json()" necessitates the client to have set "Content-Type" to "application/json"
    body = json.loads(request.get_data())

    patientId = None

    # TODO
    # BEGIN STRIP
    patientId = client.addDocument('ehr', {
        # '_id' : 'IMPLICITLY AUTO-GENERATED BY CouchDB',
        'type' : 'patient',
        'name' : body['name'],
    })
    # END STRIP

    return Response(json.dumps({
        'id' : patientId
    }), mimetype = 'application/json')
        

@app.route('/record-temperature', methods = [ 'POST' ])
def record_temperature():
    # "request.get_json()" necessitates the client to have set "Content-Type" to "application/json"
    body = json.loads(request.get_data())

    now = datetime.datetime.now().isoformat()  # Get current time

    # TODO
    # BEGIN STRIP
    client.addDocument('ehr', {
        # '_id' : 'IMPLICITLY AUTO-GENERATED BY CouchDB',
        'type' : 'temperature',
        'patient_id' : body['id'],
        'temperature' : body['temperature'],
        'time' : now,
    })
    # END STRIP

    return Response('', 204)

@app.route('/record-bloodpressure', methods = [ 'POST' ])
def record_blood_pressure():
    body = json.loads(request.get_data())
    now = datetime.datetime.now().isoformat()

    client.addDocument('ehr', {
        'type' : 'blood_pressure',
        'patient_id' : body['id'],
        'systolic' : body['systolic'],
        'diastolic' : body['diastolic'],
        'mean_arterial_pressure' : body['mean_arterial_pressure'],
        'pulse_pressure' : body['pulse_pressure'],
        'time' : now,
    })

    return Response('', 204)

@app.route('/record-bloodsugar', methods = [ 'POST' ])
def record_blood_sugar():
    body = json.loads(request.get_data())
    now = datetime.datetime.now().isoformat()

    client.addDocument('ehr', {
        'type' : 'blood_sugar',
        'patient_id' : body['id'],
        'blood_sugar_level' : body['blood_sugar_level'],
        'measurement_type' : body['measurement_type'],
        'comment' : body.get('comment', ''),  # Optional comment field
        'time' : now,
    })

    return Response('', 204)

# Enregistrement d'un médicament
@app.route('/record-medication', methods = [ 'POST' ])
def record_medication():
    body = json.loads(request.get_data())
    now = datetime.datetime.now().isoformat()
    client.addDocument('ehr', {
        'type' : 'medication',
        'patient_id' : body['id'],
        'medication_name' : body['medication_name'],
        'dosage' : body['dosage'],
        'frequency' : body['frequency'],
        'comment' : body.get('comment', ''),  # Champs de commentaire facultatif
        'time' : now,
    })
    return Response('', 204)

@app.route('/record-foodjournal', methods = [ 'POST' ])
def record_food_journal():
    body = json.loads(request.get_data())
    now = datetime.datetime.now().isoformat()

    client.addDocument('ehr', {
        'type' : 'food_journal',
        'patient_id' : body['id'],
        'meal_time' : body['meal_time'],
        'meal_type' : body['meal_type'],
        'food' : body['food'],
        'calories' : body['calories'],
        'time' : now,
    })

    return Response('', 204)

@app.route('/record-physicalactivity', methods = [ 'POST' ])
def record_physical_activity():
    body = json.loads(request.get_data())
    now = datetime.datetime.now().isoformat()

    client.addDocument('ehr', {
        'type' : 'physical_activity',
        'patient_id' : body['id'],
        'activity_type' : body['activity_type'],
        'duration' : body['duration'],
        'time' : now,
    })

    return Response('', 204)

@app.route('/record-appointment', methods = [ 'POST' ])
def record_appointment():
    body = json.loads(request.get_data())
    now = datetime.datetime.now().isoformat()

    client.addDocument('ehr', {
        'type' : 'appointment',
        'patient_id' : body['id'],
        'appointment_time' : body['appointment_time'],
        'doctor_name' : body['doctor_name'],
        'reason' : body['reason'],
        'time' : now,
    })

    return Response('', 204)

@app.route('/patients', methods = [ 'GET' ])
def list_patients():
    result = []

    # TODO
    # BEGIN STRIP
    patients = client.executeView('ehr', 'patients', 'by_patient_name')

    for patient in patients:
        result.append({
            'id' : patient['value']['_id'],
            'name' : patient['value']['name'],
        })
    # END STRIP

    return Response(json.dumps(result), mimetype = 'application/json')
        

@app.route('/temperatures', methods = [ 'GET' ])
def list_temperatures():
    patientId = request.args.get('id')

    result = []

    # TODO
    # BEGIN STRIP
    temperatures = client.executeView('ehr', 'temperatures', 'by_patient_id', patientId)

    for temperature in temperatures:
        result.append({
            'time' : temperature['value']['time'],
            'temperature' : temperature['value']['temperature'],
        })
    # END STRIP

    return Response(json.dumps(result), mimetype = 'application/json')

@app.route('/blood_pressures', methods = [ 'GET' ])
def list_blood_pressures():
    patientId = request.args.get('id')
    result = []

    blood_pressures = client.executeView('ehr', 'blood_pressures', 'by_patient_id', patientId)

    for bp in blood_pressures:
        result.append({
            'time' : bp['time'],
            'systolic' : bp['systolic'],
            'diastolic' : bp['diastolic'],
            'mean_arterial_pressure' : bp['mean_arterial_pressure'],
            'pulse_pressure' : bp['pulse_pressure']

        })

    return Response(json.dumps(result), mimetype = 'application/json')

@app.route('/blood_sugars', methods = [ 'GET' ])
def list_blood_sugars():
    patientId = request.args.get('id')
    result = []

    blood_sugars = client.executeView('ehr', 'blood_sugars', 'by_patient_id', patientId)

    for bs in blood_sugars:
        result.append({
            'time' : bs['time'],
            'blood_sugar_level' : bs['blood_sugar_level'],
            'measurement_type' : bs['measurement_type'],
            'comment' : bs['comment'],
        })

    return Response(json.dumps(result), mimetype = 'application/json')

# Récupération de la liste des médicaments pour un patient donné
@app.route('/medications', methods = [ 'GET' ])
def list_medications():
    patientId = request.args.get('id')
    result = []
    medications = client.executeView('ehr', 'medications', 'by_patient_id', patientId)
    for med in medications:
        result.append({
            'time' : med['time'],
            'medication_name' : med['medication_name'],
            'dosage' : med['dosage'],
            'frequency' : med['frequency'],
            'comment' : med['comment'],
        })
    return Response(json.dumps(result), mimetype = 'application/json')

@app.route('/food_journals', methods = [ 'GET' ])
def list_food_journals():
    patientId = request.args.get('id')
    result = []

    food_journals = client.executeView('ehr', 'food_journals', 'by_patient_id', patientId)

    for journal in food_journals:
        result.append({
            'time' : journal['time'],
            'meal_time' : journal['meal_time'],
            'meal_type' : journal['meal_type'],
            'food' : journal['food'],
            'calories' : journal['calories']
        })

    return Response(json.dumps(result), mimetype = 'application/json')

@app.route('/physical_activities', methods = [ 'GET' ])
def list_physical_activities():
    patientId = request.args.get('id')
    result = []

    physical_activities = client.executeView('ehr', 'physical_activities', 'by_patient_id', patientId)

    for activity in physical_activities:
        result.append({
            'time' : activity['time'],
            'activity_type' : activity['activity_type'],
            'duration' : activity['duration']
        })

    return Response(json.dumps(result), mimetype = 'application/json')

@app.route('/appointments', methods = [ 'GET' ])
def list_appointments():
    patientId = request.args.get('id')
    result = []

    appointments = client.executeView('ehr', 'appointments', 'by_patient_id', patientId)

    for appointment in appointments:
        result.append({
            'time' : appointment['time'],
            'appointment_time' : appointment['appointment_time'],
            'doctor_name' : appointment['doctor_name'],
            'reason' : appointment['reason']
        })

    return Response(json.dumps(result), mimetype = 'application/json')




if __name__ == '__main__':
    app.run()
